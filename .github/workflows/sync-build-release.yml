name: Sync, Build, and Release

on:
  workflow_dispatch:
  schedule:
    - cron: "0 6 * * *" # Runs daily at 00:00 CST

env:
  ORIGINAL_OWNER: Ne0n09                     # Upstream owner
  ORIGINAL_REPO: remote-falcon-plugins-api   # Upstream repo
  GHCR_NAMESPACE: sh-rf                      # Your GHCR namespace (lowercase)
  IMAGE_NAME: ghcr.io/${GHCR_NAMESPACE}/${ORIGINAL_REPO}-test
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

permissions:
  contents: write
  packages: write
  actions: read
  pull-requests: write

jobs:
  sync-upstream:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout fork
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: Add upstream remote
        run: git remote add upstream https://github.com/${{ env.ORIGINAL_OWNER }}/${{ env.ORIGINAL_REPO }}.git || true

      - name: Fetch upstream
        run: git fetch upstream main

      - name: Check for upstream changes
        id: check
        run: |
          if git diff --quiet main upstream/main; then
            echo "✅ Already up to date. Skipping sync."
            exit 0
          fi

      - name: Merge from upstream or create PR
        if: steps.check.outputs.has_changes == 'true'
        id: merge
        run: |
          if ! git merge upstream/main --no-edit; then
            echo "⚠ Merge conflict detected. Creating pull request..."
            git merge --abort
            BRANCH="sync-upstream-$(date +%Y%m%d-%H%M%S)"
            git checkout -b "$BRANCH"
            git pull upstream main --no-edit || true
            git commit -m "Prepare PR for upstream sync with conflicts"
            git push origin "$BRANCH"

            gh pr create \
              --repo "${GITHUB_REPOSITORY}" \
              --base main \
              --head "$BRANCH" \
              --title "Sync with upstream (conflict resolution required)" \
              --body "Automatic sync from upstream failed due to conflicts. Please review and merge manually."
            
            echo "pr_created=true" >> "$GITHUB_OUTPUT"
            exit 0
          fi

          echo "✅ Merged upstream changes successfully."
          git checkout --ours .github
          git add .github
          if ! git diff --cached --quiet; then
            git commit --no-edit
          fi
          git push origin main

  build-and-release:
    needs: sync-upstream
    if: needs.sync-upstream.outputs.pr_created != 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Generate version tags
        id: version
        run: |
          DATE_TAG=$(TZ=America/Chicago date +'%Y.%m.%d')
          SHORT_HASH=$(git rev-parse --short HEAD)
          echo "date_tag=$DATE_TAG" >> $GITHUB_OUTPUT
          echo "short_hash=$SHORT_HASH" >> $GITHUB_OUTPUT

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image with cache
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          platforms: linux/amd64
          tags: |
            ${{ env.IMAGE_NAME }}:latest
            ${{ env.IMAGE_NAME }}:${{ steps.version.outputs.date_tag }}
            ${{ env.IMAGE_NAME }}:${{ steps.version.outputs.short_hash }}
          cache-from: type=gha,scope=rf-build
          cache-to: type=gha,scope=rf-build,mode=max

      - name: Create GitHub Release
        run: |
          COMMITS=$(git log upstream/main..origin/main --pretty=format:"- %s (%h)")
          gh release create "${{ steps.version.outputs.date_tag }}" \
            --title "Release ${{ steps.version.outputs.date_tag }}" \
            --notes "$COMMITS" \
            --repo SH-RF/rf-plugins-api-test
